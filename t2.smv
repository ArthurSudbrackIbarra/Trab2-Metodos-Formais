---------------------------------------------------------------------------
-- Trabalho 2 Metodos Formais.                                           --
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- TEMPORIZADOR.                                                         --
---------------------------------------------------------------------------

MODULE temporizador(reset)
  VAR 
    tempo : 0 .. 3;
  ASSIGN
    init(tempo) := 0;
    next(tempo) := 
      case
        reset : 0;
        tempo = 3 : 3;
        TRUE : tempo + 1;
      esac;
  DEFINE
    timeout := tempo = 3;

---------------------------------------------------------------------------
-- CONTROLADOR                                                           --
---------------------------------------------------------------------------

MODULE main
  VAR
    veiculos_no_oeste : boolean;
    veiculos_no_leste : boolean;
    veiculos_sobre_ponte : boolean;
    sinaleira_oeste : {verde, vermelho};
    sinaleira_leste : {verde, vermelho};
    vez_sinaleira : {oeste, leste};
    temp : temporizador(temp.timeout);
  ASSIGN
    -- Inicialização.
    init(veiculos_no_oeste) := FALSE;
    init(veiculos_no_leste) := FALSE;
    init(veiculos_sobre_ponte) := FALSE;
    init(sinaleira_oeste) := vermelho;
    init(sinaleira_leste) := vermelho;
    init(vez_sinaleira) := oeste;

    -- Transições de estado.

    -- Controla qual sinaleira tem direito de ficar verde.
    next(vez_sinaleira) :=
      case
        -- Se ainda não deu timeout, mantém a vez da sinaleira atual.
        !temp.timeout : vez_sinaleira;
        -- Se deu timeout, passa a vez para a outra sinaleira.
        vez_sinaleira = oeste : leste;
        TRUE : oeste;
      esac;

    -- Controla a sinaleira oeste.
    next(sinaleira_oeste) :=
      case
        -- Se deu timeout, fica vermelha.
        temp.timeout : vermelho;
        -- Se não tem veículos no oeste, fica vermelha.
        !veiculos_no_oeste : vermelho;
        -- Se tem veículos no oeste e nenhum sobre a ponte, fica verde.
        -- Contanto que seja a vez dessa sinaleira.
        vez_sinaleira = oeste & veiculos_no_oeste & !veiculos_sobre_ponte : verde;
        -- Caso contrário, mantém a sinaleira no estado atual.
        TRUE : sinaleira_oeste;
      esac;

    -- Controla a sinaleira leste.
    next(sinaleira_leste) :=
      case
        -- Se deu timeout, fica vermelha.
        temp.timeout : vermelho;
        -- Se não tem veículos no leste, fica vermelha.
        !veiculos_no_leste : vermelho;
        -- Se tem veículos no leste e nenhum sobre a ponte, fica verde.
        -- Contanto que seja a vez dessa sinaleira.
        vez_sinaleira = leste & veiculos_no_leste & !veiculos_sobre_ponte : verde;
        -- Caso contrário, mantém a sinaleira no estado atual.
        TRUE : sinaleira_leste;
      esac;

---------------------------------------------------------------------------
-- PROPRIEDADES                                                          --
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- LTL                                                                   --
---------------------------------------------------------------------------

-- 1. Propriedade de segurança:
-- nunca é o caso que ambos os semáforos são "verde" ao mesmo tempo.
LTLSPEC G !(sinaleira_oeste = verde & sinaleira_leste = verde) -- OK.
-- A fórmula acima é verdadeira e é desejada porque se ambos os semáforos
-- ficarem verdes ao mesmo tempo, pode ocorrer um acidente.

-- 2. Propriedade de vivacidade:
-- se um semáforo é "verde", então eventualmente ele será "vermelho".
LTLSPEC G (sinaleira_oeste = verde -> F sinaleira_oeste = vermelho) -- OK.
LTLSPEC G (sinaleira_leste = verde -> F sinaleira_leste = vermelho) -- OK.
-- As fórmulas acima são verdadeiras e são desejadas porque se um semáforo
-- ficar verde, ele deve ficar vermelho em algum momento, visto que se ele
-- ficar verde para sempre, os veículos do outro lado da ponte nunca poderão
-- atravessar.

-- 3. TODO...

---------------------------------------------------------------------------
-- CTL                                                                   --
---------------------------------------------------------------------------

-- 1. Em algum momento o semáforo do lado oeste é
-- "verde" e em algum momento o semáforo do lado leste é “verde”.
CTLSPEC (EF (sinaleira_oeste = verde)) & (EF (sinaleira_leste = verde)) -- OK.
-- A fórmula acima é verdadeira e é desejada, visto que é desejado que ambos
-- os semáforos fiquem verdes em algum momento para que carros de ambos os
-- lados possam atravessar a ponte.

-- 2. Sempre que o semáforo do lado leste estiver "verde" e um veículo estiver
-- sobre a ponte, é possível que o semáforo do lado leste permaneça “verde” para sempre.
CTLSPEC (sinaleira_leste = verde & veiculos_sobre_ponte) -> (EG sinaleira_leste = verde) -- OK.
-- A fórmula acima é verdadeira e NÃO é desejada, visto que se o semáforo do
-- lado leste ficar verde para sempre, os veículos do lado oeste nunca poderão
-- atravessar a ponte. Aqui há um problema no modelo.
